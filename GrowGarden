-- Servicesq
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InsertService = game:GetService("InsertService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer.leaderstats
local Backpack = LocalPlayer.Backpack
local PlayerGui = LocalPlayer.PlayerGui

local ShecklesCount = Leaderstats.Sheckles
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

-- Folders
local GameEvents = ReplicatedStorage.GameEvents
local Farms = workspace.Farm

-- Dicts
local SeedStock = {}
local OwnedSeeds = {}
local HarvestIgnores = {
    Normal = false,
    Gold = false,
    Rainbow = false
}

-- Globals
local currentSeed = ""
local autoPlant = false
local autoPlantRandom = false
local autoHarvest = false
local selectedBuySeed = ""
local autoBuy = false
local autoSell = false
local sellThreshold = 15
local autoWalk = false
local autoWalkAllowRandom = true
local noClip = false
local autoWalkMaxWait = 10
local autoWalkStatus

-- Functions
local function Plant(Position: Vector3, Seed: string)
    GameEvents.Plant_RE:FireServer(Position, Seed)
    wait(.3)
end

local function GetFarms()
    return Farms:GetChildren()
end

local function GetFarmOwner(Farm: Folder): string
    local Important = Farm.Important
    local Data = Important.Data
    local Owner = Data.Owner
    return Owner.Value
end

local function GetFarm(PlayerName: string): Folder?
    local Farms = GetFarms()
    for _, Farm in next, Farms do
        local Owner = GetFarmOwner(Farm)
        if Owner == PlayerName then
            return Farm
        end
    end
    return
end

local IsSelling = false
local function SellInventory()
    local Character = LocalPlayer.Character
    local Previous = Character:GetPivot()
    local PreviousSheckles = ShecklesCount.Value

    if IsSelling then return end
    IsSelling = true

    Character:PivotTo(CFrame.new(62, 4, -26))
    while wait() do
        if ShecklesCount.Value ~= PreviousSheckles then break end
        GameEvents.Sell_Inventory:FireServer()
    end
    Character:PivotTo(Previous)

    wait(0.2)
    IsSelling = false
end

local function BuySeed(Seed: string)
    GameEvents.BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
    local Seed = selectedBuySeed
    local Stock = SeedStock[Seed]

    if not Stock or Stock <= 0 then return end

    for i = 1, Stock do
        BuySeed(Seed)
    end
end

local function GetSeedInfo(Seed: Tool): number?
    local PlantName = Seed:FindFirstChild("Plant_Name")
    local Count = Seed:FindFirstChild("Numbers")
    if not PlantName then return end
    return PlantName.Value, Count.Value
end

local function CollectSeedsFromParent(Parent, Seeds: table)
    for _, Tool in next, Parent:GetChildren() do
        local Name, Count = GetSeedInfo(Tool)
        if not Name then continue end
        Seeds[Name] = {Count = Count, Tool = Tool}
    end
end

local function CollectCropsFromParent(Parent, Crops: table)
    for _, Tool in next, Parent:GetChildren() do
        local Name = Tool:FindFirstChild("Item_String")
        if not Name then continue end
        table.insert(Crops, Tool)
    end
end

local function GetOwnedSeeds(): table
    local Character = LocalPlayer.Character
    CollectSeedsFromParent(Backpack, OwnedSeeds)
    CollectSeedsFromParent(Character, OwnedSeeds)
    return OwnedSeeds
end

local function GetInvCrops(): table
    local Character = LocalPlayer.Character
    local Crops = {}
    CollectCropsFromParent(Backpack, Crops)
    CollectCropsFromParent(Character, Crops)
    return Crops
end

local function GetArea(Base: BasePart)
    local Center = Base:GetPivot()
    local Size = Base.Size
    local X1 = math.ceil(Center.X - (Size.X/2))
    local Z1 = math.ceil(Center.Z - (Size.Z/2))
    local X2 = math.floor(Center.X + (Size.X/2))
    local Z2 = math.floor(Center.Z + (Size.Z/2))
    return X1, Z1, X2, Z2
end

local function EquipCheck(Tool)
    local Character = LocalPlayer.Character
    local Humanoid = Character.Humanoid
    if Tool.Parent ~= Backpack then return end
    Humanoid:EquipTool(Tool)
end

local MyFarm = GetFarm(LocalPlayer.Name)
local MyImportant = MyFarm.Important
local PlantLocations = MyImportant.Plant_Locations
local PlantsPhysical = MyImportant.Plants_Physical

local Dirt = PlantLocations:FindFirstChildOfClass("Part")
local X1, Z1, X2, Z2 = GetArea(Dirt)

local function GetRandomFarmPoint(): Vector3
    local FarmLands = PlantLocations:GetChildren()
    local FarmLand = FarmLands[math.random(1, #FarmLands)]
    local X1, Z1, X2, Z2 = GetArea(FarmLand)
    local X = math.random(X1, X2)
    local Z = math.random(Z1, Z2)
    return Vector3.new(X, 4, Z)
end

local function AutoPlantLoop()
    local Seed = currentSeed
    local SeedData = OwnedSeeds[Seed]
    if not SeedData then return end
    local Count = SeedData.Count
    local Tool = SeedData.Tool
    if Count <= 0 then return end
    local Planted = 0
    local Step = 1
    EquipCheck(Tool)
    if autoPlantRandom then
        for i = 1, Count do
            local Point = GetRandomFarmPoint()
            Plant(Point, Seed)
        end
    else
        for X = X1, X2, Step do
            for Z = Z1, Z2, Step do
                if Planted > Count then break end
                local Point = Vector3.new(X, 0.13, Z)
                Planted += 1
                Plant(Point, Seed)
            end
        end
    end
end

local function HarvestPlant(Plant: Model)
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    if not Prompt then return end
    fireproximityprompt(Prompt)
end

local function GetSeedStock(IgnoreNoStock: boolean?): table
    local SeedShop = PlayerGui.Seed_Shop
    local Items = SeedShop:FindFirstChild("Item_Size", true).Parent
    local NewList = {}
    for _, Item in next, Items:GetChildren() do
        local MainFrame = Item:FindFirstChild("Main_Frame")
        if not MainFrame then continue end
        local StockText = MainFrame.Stock_Text.Text
        local StockCount = tonumber(StockText:match("%d+"))
        if IgnoreNoStock then
            if StockCount <= 0 then continue end
            NewList[Item.Name] = StockCount
            continue
        end
        SeedStock[Item.Name] = StockCount
    end
    return IgnoreNoStock and NewList or SeedStock
end

local function CanHarvest(Plant): boolean?
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    if not Prompt then return end
    if not Prompt.Enabled then return end
    return true
end

local function CollectHarvestable(Parent, Plants, IgnoreDistance: boolean?)
    local Character = LocalPlayer.Character
    local PlayerPosition = Character:GetPivot().Position
    for _, Plant in next, Parent:GetChildren() do
        local Fruits = Plant:FindFirstChild("Fruits")
        if Fruits then
            CollectHarvestable(Fruits, Plants, IgnoreDistance)
        end
        local PlantPosition = Plant:GetPivot().Position
        local Distance = (PlayerPosition - PlantPosition).Magnitude
        if not IgnoreDistance and Distance > 15 then continue end
        local Variant = Plant:FindFirstChild("Variant")
        if HarvestIgnores[Variant.Value] then return end
        if CanHarvest(Plant) then
            table.insert(Plants, Plant)
        end
    end
    return Plants
end

local function GetHarvestablePlants(IgnoreDistance: boolean?)
    local Plants = {}
    CollectHarvestable(PlantsPhysical, Plants, IgnoreDistance)
    return Plants
end

local function HarvestPlants(Parent: Model)
    local Plants = GetHarvestablePlants()
    for _, Plant in next, Plants do
        HarvestPlant(Plant)
    end
end

local function AutoSellCheck()
    local CropCount = #GetInvCrops()
    if CropCount < sellThreshold then return end
    SellInventory()
end

local function AutoWalkLoop()
    if IsSelling then return end
    local Character = LocalPlayer.Character
    local Humanoid = Character.Humanoid
    local Plants = GetHarvestablePlants(true)
    local DoRandom = #Plants == 0 or (autoWalkAllowRandom and math.random(1, 3) == 2)
    if DoRandom then
        local Position = GetRandomFarmPoint()
        Humanoid:MoveTo(Position)
        autoWalkStatus.Text = "Random point"
        return
    end
    for _, Plant in next, Plants do
        local Position = Plant:GetPivot().Position
        Humanoid:MoveTo(Position)
        autoWalkStatus.Text = Plant.Name
    end
end

local function NoclipLoop()
    local Character = LocalPlayer.Character
    if not Character then return end
    for _, Part in Character:GetDescendants() do
        if Part:IsA("BasePart") then
            Part.CanCollide = false
        end
    end
end

local function MakeLoop(getToggle, Func)
    coroutine.wrap(function()
        while wait(.01) do
            if not getToggle() then continue end
            Func()
        end
    end)()
end

local function StartServices()
    MakeLoop(function() return autoPlant end, AutoPlantLoop)
    MakeLoop(function() return autoHarvest end, function() HarvestPlants(PlantsPhysical) end)
    MakeLoop(function() return autoBuy end, BuyAllSelectedSeeds)
    MakeLoop(function() return autoWalk end, function()
        local MaxWait = autoWalkMaxWait
        AutoWalkLoop()
        wait(math.random(1, MaxWait))
    end)
    while wait(.1) do
        GetSeedStock()
        GetOwnedSeeds()
    end
end

-- LoadMainUI
function LoadMainUI()
    local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()
    local window = DrRayLibrary:Load("Souls Hub", "Default")

    local farmingTab = DrRayLibrary.newTab("Farming", "ImageIdHere")
    local managementTab = DrRayLibrary.newTab("Management", "ImageIdHere")

    local seedStock = GetSeedStock()
    local seedOptions = {}
    for seed in pairs(seedStock) do
        table.insert(seedOptions, seed)
    end
    if #seedOptions > 0 then
        currentSeed = seedOptions[1]
        selectedBuySeed = seedOptions[1]
    end

    -- Farming Tab
    farmingTab.newDropdown("Seed", "Select a seed for planting", seedOptions, function(selected)
        currentSeed = selected
    end)
    farmingTab.newToggle("Auto Plant Enabled", "Enable auto planting", false, function(state)
        autoPlant = state
    end)
    farmingTab.newToggle("Plant at Random Points", "Plant seeds at random points", false, function(state)
        autoPlantRandom = state
    end)
    farmingTab.newButton("Plant All", "Plant all seeds", function()
        AutoPlantLoop()
    end)
    farmingTab.newToggle("Auto Harvest Enabled", "Enable auto harvesting", false, function(state)
        autoHarvest = state
    end)
    for key, value in pairs(HarvestIgnores) do
        farmingTab.newToggle("Ignore " .. key, "Ignore " .. key .. " plants", value, function(state)
            HarvestIgnores[key] = state
        end)
    end
    autoWalkStatus = farmingTab.newLabel("Auto Walk Status: None")
    farmingTab.newToggle("Auto Walk Enabled", "Enable auto walking", false, function(state)
        autoWalk = state
    end)
    farmingTab.newToggle("Allow Random Points", "Allow walking to random points", true, function(state)
        autoWalkAllowRandom = state
    end)
    farmingTab.newToggle("NoClip", "Enable NoClip", false, function(state)
        noClip = state
    end)
    farmingTab.newSlider("Max Walk Delay", "Maximum delay between walks", 120, false, function(value)
        autoWalkMaxWait = value
    end)

    -- Management Tab
    managementTab.newDropdown("Seed to Buy", "Select a seed to buy", seedOptions, function(selected)
        selectedBuySeed = selected
    end)
    managementTab.newToggle("Auto Buy Enabled", "Enable auto buying", false, function(state)
        autoBuy = state
    end)
    managementTab.newButton("Buy All", "Buy all selected seeds", function()
        BuyAllSelectedSeeds()
    end)
    managementTab.newButton("Sell Inventory", "Sell all crops", function()
        SellInventory()
    end)
    managementTab.newToggle("Auto Sell Enabled", "Enable auto selling", false, function(state)
        autoSell = state
    end)
    managementTab.newSlider("Sell Threshold", "Number of crops to trigger auto sell", 199, false, function(value)
        sellThreshold = value
    end)

    StartServices()
end

-- Execute Main UI
LoadMainUI()

-- Connections
Backpack.ChildAdded:Connect(function()
    if not autoSell then return end
    AutoSellCheck()
end)

RunService.Stepped:Connect(function()
    if not noClip then return end
    NoclipLoop()
end)
